{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\visha\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\components\\\\Transactions\\\\TransactionPane.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n  let {\n    transaction,\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  const [error, setError] = useState(null);\n  const handleCheckboxChange = async newValue => {\n    try {\n      setError(null); // Clear any previous errors\n      await consumerSetTransactionApproval({\n        transactionId: transaction.id,\n        newValue\n      });\n      setApproved(newValue); // Update the state only if the API call succeeds\n    } catch (err) {\n      console.error(\"Failed to update approval status\", err);\n      setError(\"Failed to update approval status\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" -\", \" \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: handleCheckboxChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"RampError\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionPane, \"YerP/2RArgpBtkXvsIotyAT09hs=\");\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\nvar _c;\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","jsxDEV","_jsxDEV","TransactionPane","_ref","_s","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","error","setError","handleCheckboxChange","newValue","transactionId","id","err","console","className","children","merchant","fileName","_jsxFileName","lineNumber","columnNumber","moneyFormatter","format","amount","employee","firstName","lastName","date","checked","disabled","onChange","_c","Intl","NumberFormat","style","currency","$RefreshReg$"],"sources":["C:/Users/visha/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { TransactionPaneComponent } from \"./types\";\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  const [approved, setApproved] = useState(transaction.approved);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleCheckboxChange = async (newValue: boolean) => {\n    try {\n      setError(null); // Clear any previous errors\n      await consumerSetTransactionApproval({\n        transactionId: transaction.id,\n        newValue,\n      });\n      setApproved(newValue); // Update the state only if the API call succeeds\n    } catch (err) {\n      console.error(\"Failed to update approval status\", err);\n      setError(\"Failed to update approval status\");\n    }\n  };\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} -{\" \"}\n          {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={loading}\n        onChange={handleCheckboxChange}\n      />\n      {error && <p className=\"RampError\">{error}</p>}\n    </div>\n  );\n};\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,OAAO,MAAMC,eAAyC,GAAGC,IAAA,IAInD;EAAAC,EAAA;EAAA,IAJoD;IACxDC,WAAW;IACXC,OAAO;IACPC,sBAAsB,EAAEC;EAC1B,CAAC,GAAAL,IAAA;EACC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACO,WAAW,CAACI,QAAQ,CAAC;EAC9D,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMe,oBAAoB,GAAG,MAAOC,QAAiB,IAAK;IACxD,IAAI;MACFF,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAChB,MAAMJ,8BAA8B,CAAC;QACnCO,aAAa,EAAEV,WAAW,CAACW,EAAE;QAC7BF;MACF,CAAC,CAAC;MACFJ,WAAW,CAACI,QAAQ,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZC,OAAO,CAACP,KAAK,CAAC,kCAAkC,EAAEM,GAAG,CAAC;MACtDL,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;EAED,oBACEX,OAAA;IAAKkB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBnB,OAAA;MAAKkB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCnB,OAAA;QAAGkB,SAAS,EAAC,UAAU;QAAAC,QAAA,GAAEf,WAAW,CAACgB,QAAQ,EAAC,GAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnDxB,OAAA;QAAAmB,QAAA,EAAIM,cAAc,CAACC,MAAM,CAACtB,WAAW,CAACuB,MAAM;MAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClDxB,OAAA;QAAGkB,SAAS,EAAC,8BAA8B;QAAAC,QAAA,GACxCf,WAAW,CAACwB,QAAQ,CAACC,SAAS,EAAC,GAAC,EAACzB,WAAW,CAACwB,QAAQ,CAACE,QAAQ,EAAC,IAAE,EAAC,GAAG,EACrE1B,WAAW,CAAC2B,IAAI;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNxB,OAAA,CAACF,aAAa;MACZiB,EAAE,EAAEX,WAAW,CAACW,EAAG;MACnBiB,OAAO,EAAExB,QAAS;MAClByB,QAAQ,EAAE5B,OAAQ;MAClB6B,QAAQ,EAAEtB;IAAqB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EACDd,KAAK,iBAAIV,OAAA;MAAGkB,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAET;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACrB,EAAA,CAzCWF,eAAyC;AAAAkC,EAAA,GAAzClC,eAAyC;AA2CtD,MAAMwB,cAAc,GAAG,IAAIW,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EACpDC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAAC,IAAAJ,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}